package example_sets;

import java_cup.runtime.Symbol;
import java.util.*;

import example_sets.contracts.IOperation;
import example_sets.contracts.IStatement;
import example_sets.operations.SetDefine;
import example_sets.operations.SetOperation;
import example_sets.operations.SetReference;
import example_sets.operations.Union;
import example_sets.operations.Difference;
import example_sets.operations.Intersection;
import example_sets.operations.Complement;

parser code {:
    public LinkedList<IStatement> AST;
    public LinkedList<String> syntaxErrors = new LinkedList<>();

    public void unrecovered_syntax_error(Symbol s) throws Exception {
        throw new Exception("Error irrecuperable en (linea, columna): " + s.left + ", " + s.right);
    }

    public void report_error(String message, Object info) {
        System.err.println("Error: " + message + " at " + info);
        syntaxErrors.add("Error: " + message + " at " + info);
    }
:}

terminal String CONJ, UNION, INTERSEC, DIFF, COMPLEMENT;
terminal String VAR;
terminal String NUMBER;
terminal String OPERATION;
terminal String LBRACE, RBRACE, COLON, COMMA, LPAREN, RPAREN;

non terminal ini;
non terminal LinkedList <IStatement> instrucciones;
non terminal IStatement instruccion;
non terminal SetDefine conjunto_def;
non terminal Set<Integer> conjunto_elements;
non terminal SetReference conjunto;
non terminal IOperation expr;
non terminal SetOperation statement;

start with ini;

ini ::= instrucciones:i {: parser.AST = i; :}
      ;

instrucciones ::= instrucciones:i instruccion:j {: RESULT = i; RESULT.add(j); :}
                | instruccion:i {: RESULT = new LinkedList<IStatement>(); RESULT.add(i); :}
                ;

instruccion ::=  conjunto_def:s {: RESULT = s; :}
                | statement:s {: RESULT = s; :};

conjunto_def ::= CONJ VAR:n COLON LBRACE conjunto_elements:c RBRACE {: RESULT = new SetDefine(n, c); :}
                    ;

conjunto_elements ::= conjunto_elements:c COMMA NUMBER:n {: RESULT = c; c.add(Integer.valueOf(n)); :}
                    | NUMBER:n {: RESULT = new HashSet<>(); RESULT.add(Integer.valueOf(n)); :}
                    ;

conjunto ::= VAR:c {: RESULT = new SetReference(c); :}
           ;

statement ::= OPERATION LPAREN expr:e RPAREN {: RESULT = new SetOperation(e); :}
             ;


expr ::= conjunto:c {: RESULT = c; :}
       |  UNION expr:e1 expr:e2 {: RESULT = new Union(e1, e2); :}
       |  INTERSEC expr:e1 expr:e2 {: RESULT = new Intersection(e1, e2); :}
       |  DIFF expr:e1 expr:e2 {: RESULT = new Difference(e1, e2); :}
       |  COMPLEMENT expr:e {: RESULT = new Complement(e); :}
       ;
