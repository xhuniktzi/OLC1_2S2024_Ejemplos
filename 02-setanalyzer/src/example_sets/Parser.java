
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package example_sets;

import java_cup.runtime.Symbol;
import java.util.*;
import example_sets.contracts.IOperation;
import example_sets.contracts.IStatement;
import example_sets.operations.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\012\007\000" +
    "\002\005\010\000\002\005\007\000\002\006\005\000\002" +
    "\006\003\000\002\006\003\000\002\007\003\000\002\011" +
    "\006\000\002\011\006\000\002\010\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\012\003\012\004\004\013\014\022\010\001" +
    "\002\000\004\011\046\001\002\000\014\002\000\003\012" +
    "\004\004\013\014\022\010\001\002\000\016\002\ufffe\003" +
    "\ufffe\004\ufffe\013\ufffe\015\ufffe\022\ufffe\001\002\000\016" +
    "\002\ufffd\003\ufffd\004\ufffd\013\ufffd\015\ufffd\022\ufffd\001" +
    "\002\000\004\011\041\001\002\000\016\002\ufffc\003\ufffc" +
    "\004\ufffc\013\ufffc\015\ufffc\022\ufffc\001\002\000\016\002" +
    "\ufffa\003\ufffa\004\ufffa\013\ufffa\015\ufffa\022\ufffa\001\002" +
    "\000\016\002\ufffb\003\ufffb\004\ufffb\013\ufffb\015\ufffb\022" +
    "\ufffb\001\002\000\004\020\017\001\002\000\004\002\016" +
    "\001\002\000\004\002\001\001\002\000\016\003\024\005" +
    "\026\006\025\007\023\010\022\011\020\001\002\000\016" +
    "\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\021\ufff3\001" +
    "\002\000\016\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\021\ufff0\001\002\000\014\005\026\006\025\007\023\010" +
    "\022\011\020\001\002\000\014\005\026\006\025\007\023" +
    "\010\022\011\020\001\002\000\004\021\035\001\002\000" +
    "\014\005\026\006\025\007\023\010\022\011\020\001\002" +
    "\000\014\005\026\006\025\007\023\010\022\011\020\001" +
    "\002\000\004\021\030\001\002\000\016\002\ufff2\003\ufff2" +
    "\004\ufff2\013\ufff2\015\ufff2\022\ufff2\001\002\000\014\005" +
    "\026\006\025\007\023\010\022\011\020\001\002\000\016" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\021\uffef\001" +
    "\002\000\014\005\026\006\025\007\023\010\022\011\020" +
    "\001\002\000\016\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\021\uffee\001\002\000\016\002\ufff1\003\ufff1\004\ufff1" +
    "\013\ufff1\015\ufff1\022\ufff1\001\002\000\014\005\026\006" +
    "\025\007\023\010\022\011\020\001\002\000\016\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\021\uffed\001\002\000" +
    "\016\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\021\uffec" +
    "\001\002\000\004\014\042\001\002\000\012\003\012\004" +
    "\004\013\014\022\010\001\002\000\014\003\012\004\004" +
    "\013\014\015\045\022\010\001\002\000\016\002\uffff\003" +
    "\uffff\004\uffff\013\uffff\015\uffff\022\uffff\001\002\000\016" +
    "\002\ufff9\003\ufff9\004\ufff9\013\ufff9\015\ufff9\022\ufff9\001" +
    "\002\000\004\016\047\001\002\000\006\003\051\014\050" +
    "\001\002\000\006\003\053\012\054\001\002\000\004\015" +
    "\052\001\002\000\016\002\ufff7\003\ufff7\004\ufff7\013\ufff7" +
    "\015\ufff7\022\ufff7\001\002\000\006\015\ufff4\017\ufff4\001" +
    "\002\000\006\015\ufff5\017\ufff5\001\002\000\006\015\057" +
    "\017\056\001\002\000\004\012\060\001\002\000\016\002" +
    "\ufff8\003\ufff8\004\ufff8\013\ufff8\015\ufff8\022\ufff8\001\002" +
    "\000\006\015\ufff6\017\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\016\002\014\003\004\004\005\005\006\011" +
    "\010\012\012\001\001\000\002\001\001\000\012\004\043" +
    "\005\006\011\010\012\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\020\010\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\020\010" +
    "\037\001\001\000\006\007\020\010\035\001\001\000\002" +
    "\001\001\000\006\007\020\010\032\001\001\000\006\007" +
    "\020\010\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\020\010\031\001\001\000\002\001\001\000" +
    "\006\007\020\010\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\020\010\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\042" +
    "\004\005\005\006\011\010\012\012\001\001\000\012\004" +
    "\043\005\006\011\010\012\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<IStatement> AST = new LinkedList<>();
    public LinkedList<String> syntaxErrors = new LinkedList<>();

    @Override
    public void report_error(String message, Object info) {
        Symbol s = (Symbol) info;
        syntaxErrors.add("Syntax error at line " + s.left + ", column " + s.right + ": " + message);
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        Symbol s = (Symbol) info;
        syntaxErrors.add("Fatal syntax error at line " + s.left + ", column " + s.right + ": " + message);

        // Modo pánico: Descartar tokens hasta un punto de sincronización y almacenar los tokens descartados como errores.
        Symbol token;
        do {
            try {
                token = scan();
                if (token != null) {
                    syntaxErrors.add("Discarded token at line " + token.left + ", column " + token.right + ": " + token.value);
                }
            } catch (Exception e) {
                break;
            }
        } while (token.sym != sym.RBRACE && token.sym != sym.EOF);  // punto de sincronización
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws Exception {
        syntaxErrors.add("Unrecoverable syntax error at line " + s.left + ", column " + s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<IStatement> i = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.AST = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<IStatement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<IStatement> i = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IStatement j = (IStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; RESULT.add(j); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<IStatement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IStatement i = (IStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<IStatement>(); RESULT.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= conjunto_def 
            {
              IStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SetDefine s = (SetDefine)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= statement 
            {
              IStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SetOperation s = (SetOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= scope_block 
            {
              IStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= error 
            {
              IStatement RESULT =null;
		 parser.syntaxErrors.add("Error in instruction"); RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // scope_block ::= SCOPE VAR LBRACE instrucciones RBRACE 
            {
              IStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<IStatement> i = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
        // Abre un nuevo scope
        RESULT = new ScopeStatement(n, i); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scope_block",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // conjunto_def ::= CONJ VAR COLON LBRACE conjunto_elements RBRACE 
            {
              SetDefine RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Set<Integer> c = (Set<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SetDefine(n, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunto_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // conjunto_def ::= CONJ VAR COLON error RBRACE 
            {
              SetDefine RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 parser.syntaxErrors.add("Error in set elements"); RESULT = new SetDefine(n, new HashSet<>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunto_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // conjunto_elements ::= conjunto_elements COMMA NUMBER 
            {
              Set<Integer> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Set<Integer> c = (Set<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; c.add(Integer.valueOf(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunto_elements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // conjunto_elements ::= NUMBER 
            {
              Set<Integer> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new HashSet<>(); RESULT.add(Integer.valueOf(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunto_elements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // conjunto_elements ::= error 
            {
              Set<Integer> RESULT =null;
		 parser.syntaxErrors.add("Error in set element"); RESULT = new HashSet<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunto_elements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // conjunto ::= VAR 
            {
              SetReference RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SetReference(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunto",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= OPERATION LPAREN expr RPAREN 
            {
              SetOperation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IOperation e = (IOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SetOperation(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= OPERATION LPAREN error RPAREN 
            {
              SetOperation RESULT =null;
		 parser.syntaxErrors.add("Error in operation expression"); RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= conjunto 
            {
              IOperation RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SetReference c = (SetReference)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= UNION expr expr 
            {
              IOperation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IOperation e1 = (IOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IOperation e2 = (IOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Union(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= INTERSEC expr expr 
            {
              IOperation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IOperation e1 = (IOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IOperation e2 = (IOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Intersection(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= DIFF expr expr 
            {
              IOperation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IOperation e1 = (IOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IOperation e2 = (IOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Difference(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= COMPLEMENT expr 
            {
              IOperation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IOperation e = (IOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Complement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
