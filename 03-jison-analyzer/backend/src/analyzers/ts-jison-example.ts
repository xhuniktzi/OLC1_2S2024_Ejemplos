import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType } from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */
export class TsJisonExampleParser extends JisonParser implements JisonParserApi {
    $?: any;
    symbols_: SymbolsType = {"error":2,"ini":3,"START":4,"CONTENT":5,"END":6,"EOF":7,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",4:"START",5:"CONTENT",6:"END",7:"EOF"};
    productions_: ProductionsType = [0,[3,4]];
    table: Array<StateType>;
    defaultActions: {[key:number]: any} = {5:[2,1]};

    constructor (yy = {}, lexer = new TsJisonExampleLexer(yy)) {
      super(yy, lexer);

      // shorten static method to just `o` for terse STATE_TABLE
      const noCommonCode=true;
      const o = JisonParser.expandParseTable;
      this.table = [{3:1,4:[1,2]},{1:[3]},{5:[1,3]},{6:[1,4]},{7:[1,5]},{1:[2,1]}];
    }

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:
console.log("Regla reducida");
break;
        }
    }
}


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class TsJisonExampleLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"TsJisonExample"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [
        /^(?:\s+)/i,
        /^(?:INICIO\b)/i,
        /^(?:FIN\b)/i,
        /^(?:CONTENIDO\b)/i,
        /^(?:$)/i,
        /^(?:.)/i
    ];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:// ignore whitespace
      break;
    case 1:return 4;
      break;
    case 2:return 6;
      break;
    case 3:return 5;
      break;
    case 4:return 7;
      break;
    case 5:return "ERR";
      break;
        }
    }
}


