import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType } from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  import LexicalError from './Exceptions/Lexical.js';

  import SyntaxError from './Exceptions/Syntax.js'
  import BinaryExpr from './Expressions/Binary.js'
  import LiteralExpr from './Expressions/Literal.js'
  import UnaryExpr from './Expressions/Unary.js'
  import EchoStmt from './Statements/Echo.js'
  import Return from './Statements/Return.js'
  import VarDeclarationStmt from './Statements/VarDeclaration.js'
  import VarAssignmentStmt from './Statements/VarAssignment.js'
  import VarLookUpExpr from './Expressions/VarLookUp.js'
  import BlockStmt from './Statements/Block.js'
  import IfStmt from './Statements/If.js'
  import FunctionDefine from './Statements/FuncDeclaration.js'
  import Loop from './Statements/Loop.js'
  import CallFunction from './Expressions/CallFunction.js';
  import ArgumentContainer from './Context/ArgumentContainer.js';
  import ParamContainer from './Context/ParamContainer.js';
  import Break from './Statements/Break.js';
  import Execute from './Statements/Execute.js';
  import Continue from './Statements/Continue.js';

  
  const errors = []

export class TsJisonExampleParser extends JisonParser implements JisonParserApi {
    $?: any;
    symbols_: SymbolsType = {"error":2,"start":3,"statements":4,"EOF":5,"statement":6,";":7,"ECHO":8,"expression":9,"var_declaration":10,"var_assignment":11,"block":12,"conditional":13,"declare_func":14,"return":15,"loop":16,"execute":17,"BREAK":18,"CONTINUE":19,"EXECUTE":20,"IDENTIFIER":21,"(":22,"list_args":23,")":24,"{":25,"}":26,"LOOP":27,"LET":28,":":29,"type":30,"=":31,"expressions":32,"RET":33,"IF":34,"parameter":35,"list_params":36,",":37,"FUNC":38,"argument":39,"call_func":40,"arithmetic":41,"relational":42,"-":43,"literal":44,"+":45,"==":46,">":47,"INT_LITERAL":48,"STRING_LITERAL":49,"BOOL_LITERAL":50,"NULL":51,"INT":52,"STRING":53,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",7:";",8:"ECHO",18:"BREAK",19:"CONTINUE",20:"EXECUTE",21:"IDENTIFIER",22:"(",24:")",25:"{",26:"}",27:"LOOP",28:"LET",29:":",31:"=",33:"RET",34:"IF",37:",",38:"FUNC",43:"-",45:"+",46:"==",47:">",48:"INT_LITERAL",49:"STRING_LITERAL",50:"BOOL_LITERAL",51:"NULL",52:"INT",53:"STRING"};
    productions_: ProductionsType = [0,[3,2],[4,3],[4,2],[4,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[17,5],[17,3],[12,3],[16,4],[10,6],[10,4],[11,3],[32,2],[32,1],[15,2],[13,7],[35,3],[36,3],[36,1],[14,8],[14,7],[39,3],[23,3],[23,1],[40,4],[40,3],[9,1],[9,1],[9,1],[9,3],[9,3],[9,2],[9,1],[9,1],[41,3],[41,3],[42,3],[42,3],[44,1],[44,1],[44,1],[44,1],[30,1],[30,1],[30,1]];
    table: Array<StateType>;
    defaultActions: {[key:number]: any} = {6:[2,6],7:[2,7],8:[2,8],9:[2,9],10:[2,10],11:[2,11],12:[2,12],13:[2,13],14:[2,14],15:[2,15],24:[2,1],60:[2,17],61:[2,18],85:[2,19],96:[2,16],105:[2,26],107:[2,31],108:[2,30]};

    constructor (yy = {}, lexer = new TsJisonExampleLexer(yy)) {
      super(yy, lexer);

      // shorten static method to just `o` for terse STATE_TABLE
      const $V0=[1,4],$V1=[1,5],$V2=[1,14],$V3=[1,15],$V4=[1,23],$V5=[1,17],$V6=[1,18],$V7=[1,22],$V8=[1,16],$V9=[1,21],$Va=[1,19],$Vb=[1,20],$Vc=[1,35],$Vd=[1,32],$Ve=[1,33],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[5,8,18,19,20,21,25,26,27,28,33,34,38],$Vk=[1,51],$Vl=[1,50],$Vm=[1,52],$Vn=[1,53],$Vo=[7,24,37,43,45,46,47],$Vp=[1,75],$Vq=[1,79],$Vr=[1,77],$Vs=[1,78],$Vt=[1,84],$Vu=[7,24,37,46,47],$Vv=[1,88],$Vw=[24,37],$Vx=[7,24,31,37];
      const o = JisonParser.expandParseTable;
      this.table = [{2:$V0,3:1,4:2,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V2,19:$V3,20:$V4,21:$V5,25:$V6,27:$V7,28:$V8,33:$V9,34:$Va,38:$Vb},{1:[3]},{5:[1,24],6:25,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V2,19:$V3,20:$V4,21:$V5,25:$V6,27:$V7,28:$V8,33:$V9,34:$Va,38:$Vb},{7:[1,26]},{7:[1,27]},{9:28,21:$Vc,22:$Vd,40:31,41:29,42:30,43:$Ve,44:34,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{7:[2,6]},{7:[2,7]},{7:[2,8]},{7:[2,9]},{7:[2,10]},{7:[2,11]},{7:[2,12]},{7:[2,13]},{7:[2,14]},{7:[2,15]},{21:[1,40]},{22:[1,42],31:[1,41]},{2:$V0,4:43,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V2,19:$V3,20:$V4,21:$V5,25:$V6,27:$V7,28:$V8,33:$V9,34:$Va,38:$Vb},{22:[1,44]},{21:[1,45]},{9:46,21:$Vc,22:$Vd,40:31,41:29,42:30,43:$Ve,44:34,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{25:[1,47]},{21:[1,48]},{1:[2,1]},{7:[1,49]},o($Vj,[2,3]),o($Vj,[2,4]),{7:[2,5],43:$Vk,45:$Vl,46:$Vm,47:$Vn},o($Vo,[2,37]),o($Vo,[2,38]),o($Vo,[2,39]),{2:[1,55],9:54,21:$Vc,22:$Vd,40:31,41:29,42:30,43:$Ve,44:34,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{9:56,21:$Vc,22:$Vd,40:31,41:29,42:30,43:$Ve,44:34,48:$Vf,49:$Vg,50:$Vh,51:$Vi},o($Vo,[2,43]),o($Vo,[2,44],{22:[1,57]}),o($Vo,[2,49]),o($Vo,[2,50]),o($Vo,[2,51]),o($Vo,[2,52]),{29:[1,58]},{9:59,21:$Vc,22:$Vd,40:31,41:29,42:30,43:$Ve,44:34,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{24:[1,60]},{6:25,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V2,19:$V3,20:$V4,21:$V5,25:$V6,26:[1,61],27:$V7,28:$V8,33:$V9,34:$Va,38:$Vb},{9:62,21:$Vc,22:$Vd,40:31,41:29,42:30,43:$Ve,44:34,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{22:[1,63]},{7:[2,25],43:$Vk,45:$Vl,46:$Vm,47:$Vn},{2:$V0,4:64,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V2,19:$V3,20:$V4,21:$V5,25:$V6,27:$V7,28:$V8,33:$V9,34:$Va,38:$Vb},{22:[1,65]},o($Vj,[2,2]),{9:66,21:$Vc,22:$Vd,40:31,41:29,42:30,43:$Ve,44:34,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{9:67,21:$Vc,22:$Vd,40:31,41:29,42:30,43:$Ve,44:34,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{9:68,21:$Vc,22:$Vd,40:31,41:29,42:30,43:$Ve,44:34,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{9:69,21:$Vc,22:$Vd,40:31,41:29,42:30,43:$Ve,44:34,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{24:[1,70],43:$Vk,45:$Vl,46:$Vm,47:$Vn},{24:[1,71]},o($Vo,[2,42]),{21:$Vp,23:72,24:[1,73],39:74},{30:76,51:$Vq,52:$Vr,53:$Vs},{7:[2,22],43:$Vk,45:$Vl,46:$Vm,47:$Vn},{7:[2,17]},{7:[2,18]},{24:[1,80],43:$Vk,45:$Vl,46:$Vm,47:$Vn},{21:$Vt,24:[1,82],35:83,36:81},{6:25,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V2,19:$V3,20:$V4,21:$V5,25:$V6,26:[1,85],27:$V7,28:$V8,33:$V9,34:$Va,38:$Vb},{21:$Vp,23:86,39:74},o($Vo,[2,45]),o($Vo,[2,46]),o($Vu,[2,47],{43:$Vk,45:$Vl}),o($Vu,[2,48],{43:$Vk,45:$Vl}),o($Vo,[2,40]),o($Vo,[2,41]),{24:[1,87],37:$Vv},o($Vo,[2,36]),o($Vw,[2,34]),{31:[1,89]},{7:[2,21],31:[1,90]},o($Vx,[2,53]),o($Vx,[2,54]),o($Vx,[2,55]),{25:[1,91]},{24:[1,92],37:[1,93]},{25:[1,94]},o($Vw,[2,29]),{29:[1,95]},{7:[2,19]},{24:[1,96],37:$Vv},o($Vo,[2,35]),{21:$Vp,39:97},{9:98,21:$Vc,22:$Vd,40:31,41:29,42:30,43:$Ve,44:34,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{9:99,21:$Vc,22:$Vd,40:31,41:29,42:30,43:$Ve,44:34,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{2:$V0,4:100,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V2,19:$V3,20:$V4,21:$V5,25:$V6,27:$V7,28:$V8,33:$V9,34:$Va,38:$Vb},{25:[1,101]},{21:$Vt,35:102},{2:$V0,4:103,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V2,19:$V3,20:$V4,21:$V5,25:$V6,27:$V7,28:$V8,33:$V9,34:$Va,38:$Vb},{30:104,51:$Vq,52:$Vr,53:$Vs},{7:[2,16]},o($Vw,[2,33]),o($Vw,[2,32],{43:$Vk,45:$Vl,46:$Vm,47:$Vn}),{7:[2,20],43:$Vk,45:$Vl,46:$Vm,47:$Vn},{6:25,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V2,19:$V3,20:$V4,21:$V5,25:$V6,26:[1,105],27:$V7,28:$V8,33:$V9,34:$Va,38:$Vb},{2:$V0,4:106,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V2,19:$V3,20:$V4,21:$V5,25:$V6,27:$V7,28:$V8,33:$V9,34:$Va,38:$Vb},o($Vw,[2,28]),{6:25,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V2,19:$V3,20:$V4,21:$V5,25:$V6,26:[1,107],27:$V7,28:$V8,33:$V9,34:$Va,38:$Vb},o($Vw,[2,27]),{7:[2,26]},{6:25,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V2,19:$V3,20:$V4,21:$V5,25:$V6,26:[1,108],27:$V7,28:$V8,33:$V9,34:$Va,38:$Vb},{7:[2,31]},{7:[2,30]}];
    }

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:
 return {errors: errors, ast: $$[$0-1]} 
break;
case 2:

    $$[$0-2].push($$[$0-1])
    this.$ = $$[$0-2]
  
break;
case 3:
 this.$ = [$$[$0-1]] 
break;
case 4:

    errors.push(new SyntaxError($$[$0-1], _$[$0-1]))
    this.$ = []
  
break;
case 5:
 this.$ = new EchoStmt($$[$0], _$[$0-1]) 
break;
case 14:
 this.$ = new Break(_$[$0]); 
break;
case 15:
 this.$=  new Continue(_$[$0]); 
break;
case 16:
this.$ = new Execute($$[$0-3], $$[$0-1], _$[$0-4]);
break;
case 17:
this.$ = new Execute($$[$0-1], null, _$[$0-2]);
break;
case 18:
 this.$ = new BlockStmt($$[$0-1], _$[$0-2])
break;
case 19:
 this.$ = new Loop($$[$0-1], _$[$0-3])
break;
case 20:
 this.$ = new VarDeclarationStmt($$[$0-4], $$[$0-2], $$[$0], _$[$0-4]) 
break;
case 21:
 this.$ = new VarDeclarationStmt($$[$0-2], $$[$0], null, _$[$0-2]) 
break;
case 22:
 this.$ = new VarAssignmentStmt($$[$0-2], $$[$0], _$[$0-2]) 
break;
case 23:

    $$[$0-1].push($$[$0])
    this.$ = $$[$0-1]
  
break;
case 24: case 34:
this.$ = [$$[$0]]
break;
case 25:
 this.$ = new Return($$[$0], _$[$0-1])
break;
case 26:
 this.$ = new IfStmt($$[$0-4], $$[$0-1], _$[$0-6])
break;
case 27:
 this.$ = new ParamContainer($$[$0-2], $$[$0]);
break;
case 28:
 $$[$0-2].push($$[$0])
  this.$ = $$[$0-2]

break;
case 29:
 this.$ = [$$[$0]]
break;
case 30:
this.$ = new FunctionDefine($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7])
break;
case 32:
 this.$ = new ArgumentContainer($$[$0-2], $$[$0])
break;
case 33:

  $$[$0-2].push($$[$0])
  this.$ = $$[$0-2]

break;
case 35:
this.$ = new CallFunction($$[$0-3], $$[$0-1], _$[$0-3])
break;
case 40:
 this.$ = $$[$0-1] 
break;
case 41:

    errors.push(new SyntaxError(_$[$0-1], _$[$0-1]))
  
break;
case 42:
 this.$ = new UnaryExpr($$[$0-1], $$[$0], _$[$0-1]) 
break;
case 44:
 this.$ = new VarLookUpExpr($$[$0], _$[$0]) 
break;
case 45: case 46:
this.$ = new BinaryExpr($$[$0-2], $$[$0-1], $$[$0], _$[$0-1]) 
break;
case 47:
 this.$ = new BinaryExpr($$[$0-2], $$[$0-1], $$[$0], _$[$0-2]) 
break;
case 48:
 this.$ = new BinaryExpr($$[$0-2], $$[$0-1], $$[$0], _$[$0-2])
break;
case 49:
 this.$ = new LiteralExpr($$[$0], 'INT', _$[$0]) 
break;
case 50:
 this.$ = new LiteralExpr($$[$0], 'STRING', _$[$0]) 
break;
case 51:
 this.$ = new LiteralExpr($$[$0], 'BOOL', _$[$0]) 
break;
case 52:
 this.$ = new LiteralExpr($$[$0], 'NULL', _$[$0]) 
break;
        }
    }
}


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class TsJisonExampleLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case_insensitive":true,"moduleName":"TsJisonExample"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [
        /^(?:\s+)/,
        /^(?:[0-9]+)/,
        /^(?:"[^"]*")/,
        /^(?:True|False)/,
        /^(?:,)/,
        /^(?:;)/,
        /^(?::)/,
        /^(?:-)/,
        /^(?:\+)/,
        /^(?:==)/,
        /^(?:>)/,
        /^(?:=)/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\{)/,
        /^(?:\})/,
        /^(?:if\b)/,
        /^(?:function\b)/,
        /^(?:echo\b)/,
        /^(?:let\b)/,
        /^(?:int\b)/,
        /^(?:string\b)/,
        /^(?:null\b)/,
        /^(?:return\b)/,
        /^(?:break\b)/,
        /^(?:continue\b)/,
        /^(?:loop\b)/,
        /^(?:ejecutar\b)/,
        /^(?:[a-z][a-z0-9]*)/,
        /^(?:$)/,
        /^(?:.)/
    ];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1:return 48
      break;
    case 2:return 49
      break;
    case 3:return 50
      break;
    case 4:return 37
      break;
    case 5:return 7
      break;
    case 6:return 29
      break;
    case 7:return 43
      break;
    case 8:return 45
      break;
    case 9:return 46
      break;
    case 10:return 47
      break;
    case 11:return 31
      break;
    case 12:return 22
      break;
    case 13:return 24
      break;
    case 14:return 25
      break;
    case 15:return 26
      break;
    case 16:return 34
      break;
    case 17:return 38
      break;
    case 18:return 8
      break;
    case 19:return 28
      break;
    case 20:return 52
      break;
    case 21:return 53
      break;
    case 22:return 51
      break;
    case 23:return 33
      break;
    case 24:return 18
      break;
    case 25:return 19
      break;
    case 26:return 27
      break;
    case 27:return 20
      break;
    case 28:return 21
      break;
    case 29:return 5
      break;
    case 30:
  throw new LexicalError(yy_.yytext, yy_.yylineno + 1, yy_.yylloc.first_column + 1);

      break;
        }
    }
}


