import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType } from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  import LexicalError from './Exceptions/Lexical.js';

  import SyntaxError from './Exceptions/Syntax.js'
  import BinaryExpr from './Expressions/Binary.js'
  import LiteralExpr from './Expressions/Literal.js'
  import UnaryExpr from './Expressions/Unary.js'
  import EchoStmt from './Statements/Echo.js'
  import Return from './Statements/Return.js'
  import Switch from './Statements/Switch.js'
  import CaseStmt from './Statements/Case.js'
  import VarDeclarationStmt from './Statements/VarDeclaration.js'
  import VarAssignmentStmt from './Statements/VarAssignment.js'
  import VarLookUpExpr from './Expressions/VarLookUp.js'
  import BlockStmt from './Statements/Block.js'
  import IfStmt from './Statements/If.js'
  import FunctionDefine from './Statements/FuncDeclaration.js'
  import Loop from './Statements/Loop.js'
  import CallFunction from './Expressions/CallFunction.js';
  import ArgumentContainer from './Context/ArgumentContainer.js';
  import ParamContainer from './Context/ParamContainer.js';
  import Break from './Statements/Break.js';
  import Execute from './Statements/Execute.js';
  import Continue from './Statements/Continue.js';

  
  const errors = []

export class TsJisonExampleParser extends JisonParser implements JisonParserApi {
    $?: any;
    symbols_: SymbolsType = {"error":2,"start":3,"statements":4,"EOF":5,"statement":6,";":7,"ECHO":8,"expression":9,"var_declaration":10,"var_assignment":11,"block":12,"conditional":13,"declare_func":14,"return":15,"loop":16,"execute":17,"selector":18,"BREAK":19,"CONTINUE":20,"EXECUTE":21,"IDENTIFIER":22,"(":23,"list_args":24,")":25,"{":26,"}":27,"LOOP":28,"SWITCH":29,"cases":30,"DEFAULT":31,"case_stmt":32,"CASE":33,"LET":34,":":35,"type":36,"=":37,"expressions":38,"RET":39,"IF":40,"ELSE":41,"parameter":42,"list_params":43,",":44,"FUNC":45,"argument":46,"call_func":47,"arithmetic":48,"relational":49,"-":50,"literal":51,"+":52,"==":53,">":54,"INT_LITERAL":55,"STRING_LITERAL":56,"BOOL_LITERAL":57,"NULL":58,"INT":59,"STRING":60,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",7:";",8:"ECHO",19:"BREAK",20:"CONTINUE",21:"EXECUTE",22:"IDENTIFIER",23:"(",25:")",26:"{",27:"}",28:"LOOP",29:"SWITCH",31:"DEFAULT",33:"CASE",34:"LET",35:":",37:"=",39:"RET",40:"IF",41:"ELSE",44:",",45:"FUNC",50:"-",52:"+",53:"==",54:">",55:"INT_LITERAL",56:"STRING_LITERAL",57:"BOOL_LITERAL",58:"NULL",59:"INT",60:"STRING"};
    productions_: ProductionsType = [0,[3,2],[4,3],[4,2],[4,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[17,5],[17,3],[12,3],[16,4],[18,7],[18,11],[30,2],[30,1],[32,7],[10,6],[10,4],[11,3],[38,2],[38,1],[15,2],[13,7],[13,11],[42,3],[43,3],[43,1],[14,8],[14,7],[46,3],[24,3],[24,1],[47,4],[47,3],[9,1],[9,1],[9,1],[9,3],[9,3],[9,2],[9,1],[9,1],[48,3],[48,3],[49,3],[49,3],[51,1],[51,1],[51,1],[51,1],[36,1],[36,1],[36,1]];
    table: Array<StateType>;
    defaultActions: {[key:number]: any} = {6:[2,6],7:[2,7],8:[2,8],9:[2,9],10:[2,10],11:[2,11],12:[2,12],13:[2,13],14:[2,14],15:[2,15],16:[2,16],26:[2,1],63:[2,18],64:[2,19],89:[2,20],101:[2,17],116:[2,38],121:[2,37],130:[2,33],131:[2,22]};

    constructor (yy = {}, lexer = new TsJisonExampleLexer(yy)) {
      super(yy, lexer);

      // shorten static method to just `o` for terse STATE_TABLE
      const $V0=[1,4],$V1=[1,5],$V2=[1,15],$V3=[1,16],$V4=[1,24],$V5=[1,18],$V6=[1,19],$V7=[1,23],$V8=[1,25],$V9=[1,17],$Va=[1,22],$Vb=[1,20],$Vc=[1,21],$Vd=[1,37],$Ve=[1,34],$Vf=[1,35],$Vg=[1,38],$Vh=[1,39],$Vi=[1,40],$Vj=[1,41],$Vk=[5,8,19,20,21,22,26,27,28,29,34,39,40,45],$Vl=[1,54],$Vm=[1,53],$Vn=[1,55],$Vo=[1,56],$Vp=[7,25,44,50,52,53,54],$Vq=[1,79],$Vr=[1,83],$Vs=[1,81],$Vt=[1,82],$Vu=[1,88],$Vv=[7,25,44,53,54],$Vw=[1,93],$Vx=[25,44],$Vy=[7,25,37,44],$Vz=[1,113],$VA=[27,33];
      const o = JisonParser.expandParseTable;
      this.table = [{2:$V0,3:1,4:2,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{1:[3]},{5:[1,26],6:27,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{7:[1,28]},{7:[1,29]},{9:30,22:$Vd,23:$Ve,47:33,48:31,49:32,50:$Vf,51:36,55:$Vg,56:$Vh,57:$Vi,58:$Vj},{7:[2,6]},{7:[2,7]},{7:[2,8]},{7:[2,9]},{7:[2,10]},{7:[2,11]},{7:[2,12]},{7:[2,13]},{7:[2,14]},{7:[2,15]},{7:[2,16]},{22:[1,42]},{23:[1,44],37:[1,43]},{2:$V0,4:45,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{23:[1,46]},{22:[1,47]},{9:48,22:$Vd,23:$Ve,47:33,48:31,49:32,50:$Vf,51:36,55:$Vg,56:$Vh,57:$Vi,58:$Vj},{26:[1,49]},{22:[1,50]},{23:[1,51]},{1:[2,1]},{7:[1,52]},o($Vk,[2,3]),o($Vk,[2,4]),{7:[2,5],50:$Vl,52:$Vm,53:$Vn,54:$Vo},o($Vp,[2,44]),o($Vp,[2,45]),o($Vp,[2,46]),{2:[1,58],9:57,22:$Vd,23:$Ve,47:33,48:31,49:32,50:$Vf,51:36,55:$Vg,56:$Vh,57:$Vi,58:$Vj},{9:59,22:$Vd,23:$Ve,47:33,48:31,49:32,50:$Vf,51:36,55:$Vg,56:$Vh,57:$Vi,58:$Vj},o($Vp,[2,50]),o($Vp,[2,51],{23:[1,60]}),o($Vp,[2,56]),o($Vp,[2,57]),o($Vp,[2,58]),o($Vp,[2,59]),{35:[1,61]},{9:62,22:$Vd,23:$Ve,47:33,48:31,49:32,50:$Vf,51:36,55:$Vg,56:$Vh,57:$Vi,58:$Vj},{25:[1,63]},{6:27,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,27:[1,64],28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{9:65,22:$Vd,23:$Ve,47:33,48:31,49:32,50:$Vf,51:36,55:$Vg,56:$Vh,57:$Vi,58:$Vj},{23:[1,66]},{7:[2,31],50:$Vl,52:$Vm,53:$Vn,54:$Vo},{2:$V0,4:67,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{23:[1,68]},{9:69,22:$Vd,23:$Ve,47:33,48:31,49:32,50:$Vf,51:36,55:$Vg,56:$Vh,57:$Vi,58:$Vj},o($Vk,[2,2]),{9:70,22:$Vd,23:$Ve,47:33,48:31,49:32,50:$Vf,51:36,55:$Vg,56:$Vh,57:$Vi,58:$Vj},{9:71,22:$Vd,23:$Ve,47:33,48:31,49:32,50:$Vf,51:36,55:$Vg,56:$Vh,57:$Vi,58:$Vj},{9:72,22:$Vd,23:$Ve,47:33,48:31,49:32,50:$Vf,51:36,55:$Vg,56:$Vh,57:$Vi,58:$Vj},{9:73,22:$Vd,23:$Ve,47:33,48:31,49:32,50:$Vf,51:36,55:$Vg,56:$Vh,57:$Vi,58:$Vj},{25:[1,74],50:$Vl,52:$Vm,53:$Vn,54:$Vo},{25:[1,75]},o($Vp,[2,49]),{22:$Vq,24:76,25:[1,77],46:78},{36:80,58:$Vr,59:$Vs,60:$Vt},{7:[2,28],50:$Vl,52:$Vm,53:$Vn,54:$Vo},{7:[2,18]},{7:[2,19]},{25:[1,84],50:$Vl,52:$Vm,53:$Vn,54:$Vo},{22:$Vu,25:[1,86],42:87,43:85},{6:27,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,27:[1,89],28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{22:$Vq,24:90,46:78},{25:[1,91],50:$Vl,52:$Vm,53:$Vn,54:$Vo},o($Vp,[2,52]),o($Vp,[2,53]),o($Vv,[2,54],{50:$Vl,52:$Vm}),o($Vv,[2,55],{50:$Vl,52:$Vm}),o($Vp,[2,47]),o($Vp,[2,48]),{25:[1,92],44:$Vw},o($Vp,[2,43]),o($Vx,[2,41]),{37:[1,94]},{7:[2,27],37:[1,95]},o($Vy,[2,60]),o($Vy,[2,61]),o($Vy,[2,62]),{26:[1,96]},{25:[1,97],44:[1,98]},{26:[1,99]},o($Vx,[2,36]),{35:[1,100]},{7:[2,20]},{25:[1,101],44:$Vw},{26:[1,102]},o($Vp,[2,42]),{22:$Vq,46:103},{9:104,22:$Vd,23:$Ve,47:33,48:31,49:32,50:$Vf,51:36,55:$Vg,56:$Vh,57:$Vi,58:$Vj},{9:105,22:$Vd,23:$Ve,47:33,48:31,49:32,50:$Vf,51:36,55:$Vg,56:$Vh,57:$Vi,58:$Vj},{2:$V0,4:106,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{26:[1,107]},{22:$Vu,42:108},{2:$V0,4:109,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{36:110,58:$Vr,59:$Vs,60:$Vt},{7:[2,17]},{30:111,32:112,33:$Vz},o($Vx,[2,40]),o($Vx,[2,39],{50:$Vl,52:$Vm,53:$Vn,54:$Vo}),{7:[2,26],50:$Vl,52:$Vm,53:$Vn,54:$Vo},{6:27,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,27:[1,114],28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{2:$V0,4:115,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},o($Vx,[2,35]),{6:27,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,27:[1,116],28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},o($Vx,[2,34]),{27:[1,117],32:118,33:$Vz},o($VA,[2,24]),{23:[1,119]},{7:[2,32],41:[1,120]},{6:27,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,27:[1,121],28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{7:[2,38]},{7:[2,21],31:[1,122]},o($VA,[2,23]),{9:123,22:$Vd,23:$Ve,47:33,48:31,49:32,50:$Vf,51:36,55:$Vg,56:$Vh,57:$Vi,58:$Vj},{26:[1,124]},{7:[2,37]},{26:[1,125]},{25:[1,126],50:$Vl,52:$Vm,53:$Vn,54:$Vo},{2:$V0,4:127,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{2:$V0,4:128,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{26:[1,129]},{6:27,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,27:[1,130],28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{6:27,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,27:[1,131],28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{2:$V0,4:132,6:3,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},{7:[2,33]},{7:[2,22]},{6:27,8:$V1,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V2,20:$V3,21:$V4,22:$V5,26:$V6,27:[1,133],28:$V7,29:$V8,34:$V9,39:$Va,40:$Vb,45:$Vc},o($VA,[2,25])];
    }

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:
 return {errors: errors, ast: $$[$0-1]} 
break;
case 2:

    $$[$0-2].push($$[$0-1])
    this.$ = $$[$0-2]
  
break;
case 3:
 this.$ = [$$[$0-1]] 
break;
case 4:

    errors.push(new SyntaxError($$[$0-1], _$[$0-1]))
    this.$ = []
  
break;
case 5:
 this.$ = new EchoStmt($$[$0], _$[$0-1]) 
break;
case 15:
 this.$ = new Break(_$[$0]); 
break;
case 16:
 this.$=  new Continue(_$[$0]); 
break;
case 17:
this.$ = new Execute($$[$0-3], $$[$0-1], _$[$0-4]);
break;
case 18:
this.$ = new Execute($$[$0-1], null, _$[$0-2]);
break;
case 19:
 this.$ = new BlockStmt($$[$0-1], _$[$0-2])
break;
case 20:
 this.$ = new Loop($$[$0-1], _$[$0-3])
break;
case 21:
 this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6]); 
break;
case 22:
 this.$ = new Switch($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10]); 
break;
case 23:
$$[$0-1].push($$[$0])
    this.$ = $$[$0-1]
break;
case 24: case 30: case 41:
this.$ = [$$[$0]]
break;
case 25:
 this.$ = new CaseStmt($$[$0-4], $$[$0-1], _$[$0-6]); 
break;
case 26:
 this.$ = new VarDeclarationStmt($$[$0-4], $$[$0-2], $$[$0], _$[$0-4]) 
break;
case 27:
 this.$ = new VarDeclarationStmt($$[$0-2], $$[$0], null, _$[$0-2]) 
break;
case 28:
 this.$ = new VarAssignmentStmt($$[$0-2], $$[$0], _$[$0-2]) 
break;
case 29:

    $$[$0-1].push($$[$0])
    this.$ = $$[$0-1]
  
break;
case 31:
 this.$ = new Return($$[$0], _$[$0-1])
break;
case 32:
 this.$ = new IfStmt($$[$0-4], $$[$0-1], null, _$[$0-6])
break;
case 33:
 this.$ = new IfStmt($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10])
break;
case 34:
 this.$ = new ParamContainer($$[$0-2], $$[$0]);
break;
case 35:
 $$[$0-2].push($$[$0])
  this.$ = $$[$0-2]

break;
case 36:
 this.$ = [$$[$0]]
break;
case 37:
this.$ = new FunctionDefine($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7])
break;
case 39:
 this.$ = new ArgumentContainer($$[$0-2], $$[$0])
break;
case 40:

  $$[$0-2].push($$[$0])
  this.$ = $$[$0-2]

break;
case 42:
this.$ = new CallFunction($$[$0-3], $$[$0-1], _$[$0-3])
break;
case 47:
 this.$ = $$[$0-1] 
break;
case 48:

    errors.push(new SyntaxError(_$[$0-1], _$[$0-1]))
  
break;
case 49:
 this.$ = new UnaryExpr($$[$0-1], $$[$0], _$[$0-1]) 
break;
case 51:
 this.$ = new VarLookUpExpr($$[$0], _$[$0]) 
break;
case 52: case 53:
this.$ = new BinaryExpr($$[$0-2], $$[$0-1], $$[$0], _$[$0-1]) 
break;
case 54:
 this.$ = new BinaryExpr($$[$0-2], $$[$0-1], $$[$0], _$[$0-2]) 
break;
case 55:
 this.$ = new BinaryExpr($$[$0-2], $$[$0-1], $$[$0], _$[$0-2])
break;
case 56:
 this.$ = new LiteralExpr($$[$0], 'INT', _$[$0]) 
break;
case 57:
 this.$ = new LiteralExpr($$[$0], 'STRING', _$[$0]) 
break;
case 58:
 this.$ = new LiteralExpr($$[$0], 'BOOL', _$[$0]) 
break;
case 59:
 this.$ = new LiteralExpr($$[$0], 'NULL', _$[$0]) 
break;
        }
    }
}


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class TsJisonExampleLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case_insensitive":true,"moduleName":"TsJisonExample"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [
        /^(?:\s+)/,
        /^(?:[0-9]+)/,
        /^(?:"[^"]*")/,
        /^(?:True|False)/,
        /^(?:,)/,
        /^(?:;)/,
        /^(?::)/,
        /^(?:-)/,
        /^(?:\+)/,
        /^(?:==)/,
        /^(?:>)/,
        /^(?:=)/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\{)/,
        /^(?:\})/,
        /^(?:if\b)/,
        /^(?:else\b)/,
        /^(?:function\b)/,
        /^(?:echo\b)/,
        /^(?:let\b)/,
        /^(?:int\b)/,
        /^(?:string\b)/,
        /^(?:null\b)/,
        /^(?:return\b)/,
        /^(?:break\b)/,
        /^(?:continue\b)/,
        /^(?:loop\b)/,
        /^(?:ejecutar\b)/,
        /^(?:switch\b)/,
        /^(?:case\b)/,
        /^(?:default\b)/,
        /^(?:[a-z][a-z0-9]*)/,
        /^(?:$)/,
        /^(?:.)/
    ];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1:return 55
      break;
    case 2:return 56
      break;
    case 3:return 57
      break;
    case 4:return 44
      break;
    case 5:return 7
      break;
    case 6:return 35
      break;
    case 7:return 50
      break;
    case 8:return 52
      break;
    case 9:return 53
      break;
    case 10:return 54
      break;
    case 11:return 37
      break;
    case 12:return 23
      break;
    case 13:return 25
      break;
    case 14:return 26
      break;
    case 15:return 27
      break;
    case 16:return 40
      break;
    case 17:return 41
      break;
    case 18:return 45
      break;
    case 19:return 8
      break;
    case 20:return 34
      break;
    case 21:return 59
      break;
    case 22:return 60
      break;
    case 23:return 58
      break;
    case 24:return 39
      break;
    case 25:return 19
      break;
    case 26:return 20
      break;
    case 27:return 28
      break;
    case 28:return 21
      break;
    case 29:return 29
      break;
    case 30:return 33
      break;
    case 31:return 31
      break;
    case 32:return 22
      break;
    case 33:return 5
      break;
    case 34:
  throw new LexicalError(yy_.yytext, yy_.yylineno + 1, yy_.yylloc.first_column + 1);

      break;
        }
    }
}


